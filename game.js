// –°–∏—Å—Ç–µ–º–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
const Languages = {
    ru: {
        title: "ZOMBIE SHOOTER 3D",
        balance: "–ë–∞–ª–∞–Ω—Å:",
        points: "–æ—á–∫–æ–≤",
        startGame: "–ù–ê–ß–ê–¢–¨ –ò–ì–†–£",
        missions: "–ó–ê–î–ê–ù–ò–Ø",
        shop: "–ú–ê–ì–ê–ó–ò–ù",
        language: "üåê –Ø–ó–´–ö",
        back: "–ù–ê–ó–ê–î",
        ammo: "–ü–∞—Ç—Ä–æ–Ω—ã:",
        score: "–û—á–∫–∏:",
        health: "–ó–¥–æ—Ä–æ–≤—å–µ:",
        fire: "–û–ì–û–ù–¨",
        reload: "–ü–ï–†–ï–ó–ê–†–Ø–î–ö–ê",
        gameOver: "–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê",
        yourScore: "–í–∞—à —Å—á–µ—Ç:",
        completedMissions: "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:",
        playAgain: "–ò–ì–†–ê–¢–¨ –°–ù–û–í–ê",
        mainMenu: "–í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
        gameTasks: "–ò–≥—Ä–æ–≤—ã–µ",
        socialTasks: "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è",
        languageTitle: "–í–´–ë–û–† –Ø–ó–´–ö–ê",
        missionsTitle: "–ó–ê–î–ê–ù–ò–Ø",
        shopTitle: "–ú–ê–ì–ê–ó–ò–ù",
        gameOverTitle: "–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê"
    },
    en: {
        title: "ZOMBIE SHOOTER 3D",
        balance: "Balance:",
        points: "points",
        startGame: "START GAME",
        missions: "MISSIONS",
        shop: "SHOP",
        language: "üåê LANGUAGE",
        back: "BACK",
        ammo: "Ammo:",
        score: "Score:",
        health: "Health:",
        fire: "FIRE",
        reload: "RELOAD",
        gameOver: "GAME OVER",
        yourScore: "Your score:",
        completedMissions: "Completed missions:",
        playAgain: "PLAY AGAIN",
        mainMenu: "MAIN MENU",
        gameTasks: "Game Tasks",
        socialTasks: "Social Tasks",
        languageTitle: "LANGUAGE SELECTION",
        missionsTitle: "MISSIONS",
        shopTitle: "SHOP",
        gameOverTitle: "GAME OVER"
    },
    ja: {
        title: "„Çæ„É≥„Éì„Ç∑„É•„Éº„Çø„Éº3D",
        balance: "„Éê„É©„É≥„Çπ:",
        points: "„Éù„Ç§„É≥„Éà",
        startGame: "„Ç≤„Éº„É†ÈñãÂßã",
        missions: "„Éü„ÉÉ„Ç∑„Éß„É≥",
        shop: "„Ç∑„Éß„ÉÉ„Éó",
        language: "üåê Ë®ÄË™û",
        back: "Êàª„Çã",
        ammo: "ÂºæËñ¨:",
        score: "„Çπ„Ç≥„Ç¢:",
        health: "‰ΩìÂäõ:",
        fire: "Áô∫Â∞Ñ",
        reload: "„É™„É≠„Éº„Éâ",
        gameOver: "„Ç≤„Éº„É†„Ç™„Éº„Éê„Éº",
        yourScore: "„ÅÇ„Å™„Åü„ÅÆ„Çπ„Ç≥„Ç¢:",
        completedMissions: "ÂÆå‰∫Ü„Åó„Åü„Éü„ÉÉ„Ç∑„Éß„É≥:",
        playAgain: "„ÇÇ„ÅÜ‰∏ÄÂ∫¶„Éó„É¨„Ç§",
        mainMenu: "„É°„Ç§„É≥„É°„Éã„É•„Éº",
        gameTasks: "„Ç≤„Éº„É†„Çø„Çπ„ÇØ",
        socialTasks: "„ÇΩ„Éº„Ç∑„É£„É´„Çø„Çπ„ÇØ",
        languageTitle: "Ë®ÄË™ûÈÅ∏Êäû",
        missionsTitle: "„Éü„ÉÉ„Ç∑„Éß„É≥",
        shopTitle: "„Ç∑„Éß„ÉÉ„Éó",
        gameOverTitle: "„Ç≤„Éº„É†„Ç™„Éº„Éê„Éº"
    }
};

let currentLanguage = 'ru';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
function changeLanguage(lang) {
    currentLanguage = lang;
    GameData.language = lang;
    GameData.save();
    
    const langData = Languages[lang];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    document.getElementById('menu-title').textContent = langData.title;
    document.getElementById('balance-text').textContent = langData.balance;
    document.getElementById('points-text').textContent = langData.points;
    document.getElementById('start-btn').textContent = langData.startGame;
    document.getElementById('missions-btn').textContent = langData.missions;
    document.getElementById('shop-btn').textContent = langData.shop;
    document.getElementById('language-btn').textContent = langData.language;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    document.getElementById('language-title').textContent = langData.languageTitle;
    document.getElementById('language-back').textContent = langData.back;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω –∑–∞–¥–∞–Ω–∏–π
    document.getElementById('missions-title').textContent = langData.missionsTitle;
    document.getElementById('game-tab').textContent = langData.gameTasks;
    document.getElementById('social-tab').textContent = langData.socialTasks;
    document.getElementById('missions-back').textContent = langData.back;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω–∞
    document.getElementById('shop-title').textContent = langData.shopTitle;
    document.getElementById('shop-back').textContent = langData.back;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω –ø—Ä–æ–∏–≥—Ä—ã—à–∞
    document.getElementById('game-over-title').textContent = langData.gameOverTitle;
    document.getElementById('your-score-text').textContent = langData.yourScore;
    document.getElementById('completed-missions-text').textContent = langData.completedMissions;
    document.getElementById('restart-btn').textContent = langData.playAgain;
    document.getElementById('menu-btn').textContent = langData.mainMenu;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    document.getElementById('ammo-text').textContent = langData.ammo;
    document.getElementById('score-text').textContent = langData.score;
    document.getElementById('health-text').textContent = langData.health;
    document.getElementById('shoot-btn').textContent = langData.fire;
    document.getElementById('reload-btn').textContent = langData.reload;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
const GameData = {
    totalScore: 0,
    maxHealth: 100,
    damageMultiplier: 1,
    language: 'ru',
    missions: {
        // –ò–≥—Ä–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
        1: { killed: 0, completed: false },
        2: { score: 0, completed: false },
        3: { time: 0, completed: false },
        4: { killed: 0, completed: false },
        5: { score: 0, completed: false },
        6: { time: 0, completed: false },
        7: { killed: 0, completed: false },
        8: { score: 0, completed: false },
        9: { time: 0, completed: false },
        10: { killed: 0, completed: false },
        11: { score: 0, completed: false },
        12: { time: 0, completed: false },
        13: { time: 0, completed: false },
        14: { consecutiveKills: 0, completed: false },
        15: { distance: 0, completed: false },
        16: { efficientKills: 0, completed: false },
        17: { nightKills: 0, completed: false },
        18: { speedKills: 0, completed: false },
        19: { corners: 0, completed: false },
        20: { noReloadKills: 0, completed: false },
        21: { time: 0, completed: false },
        22: { accuracy: 0, completed: false },
        23: { score: 0, completed: false },
        // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        s1: { completed: false },
        s2: { completed: false },
        s3: { completed: false },
        s4: { completed: false },
        s5: { completed: false }
    },
    
    save() {
        localStorage.setItem('zombieShooterData', JSON.stringify({
            totalScore: this.totalScore,
            maxHealth: this.maxHealth,
            damageMultiplier: this.damageMultiplier,
            language: this.language,
            missions: this.missions
        }));
    },
    
    load() {
        const data = localStorage.getItem('zombieShooterData');
        if (data) {
            const parsed = JSON.parse(data);
            this.totalScore = parsed.totalScore;
            this.maxHealth = parsed.maxHealth;
            this.damageMultiplier = parsed.damageMultiplier;
            this.language = parsed.language || 'ru';
            this.missions = parsed.missions;
        }
        this.updateUI();
    },
    
    updateUI() {
        document.getElementById('total-score').textContent = this.totalScore;
    }
};

class ZombieShooter {
    constructor() {
        if (typeof THREE === 'undefined') {
            throw new Error('Three.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
        }
        
        this.scene = new THREE.Scene();
        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        this.renderer = new THREE.WebGLRenderer({
            canvas: document.getElementById('game'),
            antialias: true
        });
        
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.setClearColor(0x000000);
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–≤—É–∫–∞ –≤—ã—Å—Ç—Ä–µ–ª–∞
        this.shootSound = new Audio('pistolet_zvuk.mp3');
        this.shootSound.addEventListener('error', (e) => {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–≤—É–∫ –≤—ã—Å—Ç—Ä–µ–ª–∞:', e);
        });
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã –∑–µ–º–ª–∏
        const textureLoader = new THREE.TextureLoader();
        this.groundTexture = textureLoader.load('texture.png', 
            // –§—É–Ω–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            (texture) => {
                texture.wrapS = THREE.RepeatWrapping;
                texture.wrapT = THREE.RepeatWrapping;
                texture.repeat.set(4, 4);
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã
                if (this.floor) {
                    this.floor.material.map = texture;
                    this.floor.material.needsUpdate = true;
                }
            },
            // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            (progress) => {
                console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã: ' + (progress.loaded / progress.total * 100) + '%');
            },
            // –§—É–Ω–∫—Ü–∏—è –æ—à–∏–±–∫–∏
            (error) => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã:', error);
                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–µ–∫—Å—Ç—É—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                this.groundTexture = null;
            }
        );
        
        // –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        this.score = 0;
        this.health = GameData.maxHealth;
        this.ammo = 30;
        this.isGameOver = false;
        this.zombies = [];
        this.bullets = [];
        this.gameTime = 0;
        this.zombiesKilled = 0;
        this.trees = [];
        this.rocks = [];
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        this.consecutiveKills = 0;
        this.totalDistance = 0;
        this.lastPosition = null; // –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤ setupPlayer()
        this.shotsFired = 0;
        this.shotsHit = 0;
        this.speedKillTimer = 0;
        this.speedKillCount = 0;
        this.visitedCorners = new Set();
        this.noReloadKills = 0;
        this.startAmmo = 30;
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        this.moveForward = false;
        this.moveBackward = false;
        this.moveLeft = false;
        this.moveRight = false;
        this.canShoot = true;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ü–µ–Ω—ã
        this.setupScene();
        this.setupLights();
        this.setupPlayer();
        this.setupControls();
        
        // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
        this.lastTime = performance.now();
        this.animate();
        this.spawnZombies();
    }
    
    setupScene() {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–±–∞
        const skyGeometry = new THREE.SphereGeometry(50, 32, 32);
        const skyMaterial = new THREE.MeshBasicMaterial({
            color: 0x87CEEB,
            side: THREE.BackSide
        });
        const sky = new THREE.Mesh(skyGeometry, skyMaterial);
        this.scene.add(sky);

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–∞ —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π
        const floorGeometry = new THREE.PlaneGeometry(100, 100);
        const floorMaterial = new THREE.MeshStandardMaterial({
            map: this.groundTexture || null,
            roughness: 0.8,
            color: 0x666666 // –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø–æ–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
        });
        this.floor = new THREE.Mesh(floorGeometry, floorMaterial);
        this.floor.rotation.x = -Math.PI / 2;
        this.scene.add(this.floor);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞ (—Ç–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏)
        const terrainGeometry = new THREE.PlaneGeometry(20, 20);
        const terrainMaterial = new THREE.MeshStandardMaterial({
            color: 0x1a472a,
            roughness: 0.9
        });
        
        // –ü–µ—Ä–≤–∞—è –±–∞–∑–∞
        const base1 = new THREE.Mesh(terrainGeometry, terrainMaterial);
        base1.position.set(-15, 0.1, -15);
        base1.rotation.x = -Math.PI / 2;
        this.scene.add(base1);
        
        // –í—Ç–æ—Ä–∞—è –±–∞–∑–∞
        const base2 = new THREE.Mesh(terrainGeometry, terrainMaterial);
        base2.position.set(15, 0.1, 15);
        base2.rotation.x = -Math.PI / 2;
        this.scene.add(base2);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤
        for (let i = 0; i < 20; i++) {
            // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –¥–µ—Ä–µ–≤–∞
            const tree = new THREE.Group();
            
            // –°–æ–∑–¥–∞–µ–º —Å—Ç–≤–æ–ª
            const trunkGeometry = new THREE.CylinderGeometry(0.1, 0.15, 2, 8);
            const trunkMaterial = new THREE.MeshStandardMaterial({ color: 0x4a2f10 });
            const trunk = new THREE.Mesh(trunkGeometry, trunkMaterial);
            trunk.position.y = 1;
            tree.add(trunk);
            
            // –°–æ–∑–¥–∞–µ–º –∫—Ä–æ–Ω—É (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–µ–≤)
            const crownLayers = 3;
            for (let j = 0; j < crownLayers; j++) {
                const crownGeometry = new THREE.ConeGeometry(0.8 - j * 0.2, 1.5, 8);
                const crownMaterial = new THREE.MeshStandardMaterial({ color: 0x2d5a27 });
                const crown = new THREE.Mesh(crownGeometry, crownMaterial);
                crown.position.y = 2 + j * 0.8;
                tree.add(crown);
            }
            
            // –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤
            const angle = Math.random() * Math.PI * 2;
            const distance = 5 + Math.random() * 15;
            tree.position.x = Math.cos(angle) * distance;
            tree.position.z = Math.sin(angle) * distance;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            tree.rotation.y = Math.random() * Math.PI;
            
            this.scene.add(tree);
            this.trees.push(tree);
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–Ω–µ–π
        for (let i = 0; i < 15; i++) {
            const rockGeometry = new THREE.DodecahedronGeometry(0.5);
            const rockMaterial = new THREE.MeshStandardMaterial({ color: 0x808080 });
            const rock = new THREE.Mesh(rockGeometry, rockMaterial);
            
            // –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞–º–Ω–µ–π
            const angle = Math.random() * Math.PI * 2;
            const distance = 5 + Math.random() * 15;
            rock.position.x = Math.cos(angle) * distance;
            rock.position.z = Math.sin(angle) * distance;
            rock.position.y = 0.25;
            
            this.scene.add(rock);
            this.rocks.push(rock);
        }
    }
    
    setupLights() {
        // –£—Å–∏–ª–µ–Ω–Ω–æ–µ —Ñ–æ–Ω–æ–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.7);
        this.scene.add(ambientLight);
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç
        const directionalLight = new THREE.DirectionalLight(0xffffff, 1.5);
        directionalLight.position.set(5, 10, 5);
        this.scene.add(directionalLight);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–≤–µ—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è
        const secondaryLight = new THREE.DirectionalLight(0xffffff, 0.5);
        secondaryLight.position.set(-5, 8, -5);
        this.scene.add(secondaryLight);
    }
    
    setupPlayer() {
        this.camera.position.y = 1.6; // –í—ã—Å–æ—Ç–∞ –≥–ª–∞–∑
        this.camera.position.z = 5;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        this.lastPosition = this.camera.position.clone();
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è
        const gunGeometry = new THREE.BoxGeometry(0.1, 0.1, 0.3);
        const gunMaterial = new THREE.MeshStandardMaterial({ color: 0x333333 });
        this.gun = new THREE.Mesh(gunGeometry, gunMaterial);
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–∞–º–µ—Ä—ã
        this.gun.position.set(0.3, -0.2, -0.5);
        this.camera.add(this.gun);
        this.scene.add(this.camera);
    }
    
    setupControls() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∂–æ–π—Å—Ç–∏–∫–∞
        const joystick = document.getElementById('joystick');
        const joystickHead = document.getElementById('joystick-head');
        let isDragging = false;
        let startX, startY;
        
        joystick.addEventListener('touchstart', (e) => {
            isDragging = true;
            startX = e.touches[0].clientX;
            startY = e.touches[0].clientY;
        });
        
        document.addEventListener('touchmove', (e) => {
            if (!isDragging) return;
            
            const deltaX = e.touches[0].clientX - startX;
            const deltaY = e.touches[0].clientY - startY;
            
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –¥–∂–æ–π—Å—Ç–∏–∫–∞
            const maxDistance = 35;
            const distance = Math.min(Math.sqrt(deltaX * deltaX + deltaY * deltaY), maxDistance);
            const angle = Math.atan2(deltaY, deltaX);
            
            const moveX = Math.cos(angle) * distance;
            const moveY = Math.sin(angle) * distance;
            
            joystickHead.style.transform = `translate(${moveX}px, ${moveY}px)`;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
            this.moveForward = moveY < -10;
            this.moveBackward = moveY > 10;
            this.moveLeft = moveX < -10;
            this.moveRight = moveX > 10;
        });
        
        document.addEventListener('touchend', () => {
            isDragging = false;
            joystickHead.style.transform = '';
            this.moveForward = this.moveBackward = this.moveLeft = this.moveRight = false;
        });
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∫–∞–º–µ—Ä—ã
        let isRotating = false;
        let lastTouchX = 0;
        
        document.addEventListener('touchstart', (e) => {
            if (e.touches.length === 1 && !isDragging) {
                const touch = e.touches[0];
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Å–∞–Ω–∏–µ –Ω–µ –≤ –æ–±–ª–∞—Å—Ç–∏ –¥–∂–æ–π—Å—Ç–∏–∫–∞ –∏ –∫–Ω–æ–ø–æ–∫
                const joystickArea = document.getElementById('joystick-area');
                const actionButtons = document.getElementById('action-buttons');
                
                const joystickRect = joystickArea.getBoundingClientRect();
                const buttonsRect = actionButtons.getBoundingClientRect();
                
                if (!this.isPointInRect(touch.clientX, touch.clientY, joystickRect) &&
                    !this.isPointInRect(touch.clientX, touch.clientY, buttonsRect)) {
                    isRotating = true;
                    lastTouchX = touch.clientX;
                }
            }
        });
        
        document.addEventListener('touchmove', (e) => {
            if (isRotating && e.touches.length === 1) {
                const touch = e.touches[0];
                const deltaX = touch.clientX - lastTouchX;
                
                // –ü–æ–≤–æ—Ä–æ—Ç –∫–∞–º–µ—Ä—ã –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
                this.camera.rotation.y -= deltaX * 0.008;
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç –∫–∞–º–µ—Ä—ã
                if (this.camera.rotation.y > Math.PI) {
                    this.camera.rotation.y -= 2 * Math.PI;
                } else if (this.camera.rotation.y < -Math.PI) {
                    this.camera.rotation.y += 2 * Math.PI;
                }
                
                lastTouchX = touch.clientX;
            }
        });
        
        document.addEventListener('touchend', () => {
            isRotating = false;
        });
        
        // –ö–Ω–æ–ø–∫–∞ —Å—Ç—Ä–µ–ª—å–±—ã
        const shootBtn = document.getElementById('shoot-btn');
        shootBtn.addEventListener('touchstart', () => this.shoot());
        
        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏
        const reloadBtn = document.getElementById('reload-btn');
        reloadBtn.addEventListener('touchstart', () => this.reload());
    }
    
    isPointInRect(x, y, rect) {
        return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;
    }
    
    shoot() {
        if (!this.canShoot || this.ammo <= 0) return;
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –≤—ã—Å—Ç—Ä–µ–ª–∞
        this.shootSound.currentTime = 0;
        this.shootSound.play();
        
        this.ammo--;
        this.shotsFired++;
        document.getElementById('ammo-count').textContent = this.ammo;
        
        const bulletGeometry = new THREE.SphereGeometry(0.05);
        const bulletMaterial = new THREE.MeshBasicMaterial({ color: 0xffff00 });
        const bullet = new THREE.Mesh(bulletGeometry, bulletMaterial);
        
        bullet.position.copy(this.camera.position);
        bullet.rotation.copy(this.camera.rotation);
        
        const direction = new THREE.Vector3();
        this.camera.getWorldDirection(direction);
        bullet.velocity = direction.multiplyScalar(0.7);
        
        this.bullets.push(bullet);
        this.scene.add(bullet);
        
        this.canShoot = false;
        setTimeout(() => this.canShoot = true, 250);
    }
    
    reload() {
        if (this.ammo === 30) return;
        
        // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —É–±–∏–π—Å—Ç–≤ –±–µ–∑ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏
        this.noReloadKills = 0;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏
        setTimeout(() => {
            this.ammo = 30;
            document.getElementById('ammo-count').textContent = this.ammo;
            // this.playSound('reload');
        }, 1500);
    }
    
    spawnZombie() {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–æ–º–±–∏
        const zombieGeometry = new THREE.BoxGeometry(0.6, 1.8, 0.3);
        const zombieMaterial = new THREE.MeshStandardMaterial({ color: 0x00ff00 });
        const zombie = new THREE.Mesh(zombieGeometry, zombieMaterial);
        
        // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        const angle = Math.random() * Math.PI * 2;
        const distance = 15 + Math.random() * 10;
        zombie.position.x = Math.cos(angle) * distance;
        zombie.position.z = Math.sin(angle) * distance;
        zombie.position.y = 0.9;
        
        zombie.health = 100;
        this.zombies.push(zombie);
        this.scene.add(zombie);
    }
    
    spawnZombies() {
        setInterval(() => {
            if (this.zombies.length < 10 && !this.isGameOver) {
                this.spawnZombie();
            }
        }, 3000);
    }
    
    updateZombies() {
        for (let i = this.zombies.length - 1; i >= 0; i--) {
            const zombie = this.zombies[i];
            
            const direction = new THREE.Vector3();
            direction.subVectors(this.camera.position, zombie.position).normalize();
            zombie.position.add(direction.multiplyScalar(0.03));
            
            zombie.lookAt(this.camera.position);
            
            if (zombie.position.distanceTo(this.camera.position) < 1.5) {
                // –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–Ω –æ—Ç –∑–æ–º–±–∏
                this.health -= 0.1;
                document.getElementById('health-count').textContent = Math.ceil(this.health);
                
                if (this.health <= 0) {
                    this.gameOver();
                }
            }
        }
    }
    
    updateBullets() {
        for (let i = this.bullets.length - 1; i >= 0; i--) {
            const bullet = this.bullets[i];
            bullet.position.add(bullet.velocity);
            
            for (let j = this.zombies.length - 1; j >= 0; j--) {
                const zombie = this.zombies[j];
                if (bullet.position.distanceTo(zombie.position) < 1) {
                    this.scene.remove(bullet);
                    this.bullets.splice(i, 1);
                    
                    zombie.health -= 50 * GameData.damageMultiplier;
                    if (zombie.health <= 0) {
                        this.scene.remove(zombie);
                        this.zombies.splice(j, 1);
                        this.score += 100;
                        this.zombiesKilled++;
                        this.shotsHit++;
                        this.consecutiveKills++;
                        this.noReloadKills++;
                        this.speedKillCount++;
                        document.getElementById('score-count').textContent = this.score;
                        
                        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏–π
                        this.updateMissions();
                    }
                    break;
                }
            }
            
            if (bullet.position.length() > 50) {
                this.scene.remove(bullet);
                this.bullets.splice(i, 1);
            }
        }
    }
    
    updateMovement() {
        const speed = 0.05; // –£–º–µ–Ω—å—à–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
        const direction = new THREE.Vector3();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
        const oldPosition = this.camera.position.clone();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        if (this.moveForward) this.camera.position.z -= speed;
        if (this.moveBackward) this.camera.position.z += speed;
        if (this.moveLeft) this.camera.position.x -= speed;
        if (this.moveRight) this.camera.position.x += speed;
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        if (this.lastPosition) {
            const distance = this.camera.position.distanceTo(this.lastPosition);
            this.totalDistance += distance;
        }
        this.lastPosition = this.camera.position.clone();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–µ —É–≥–ª–æ–≤ –∫–∞—Ä—Ç—ã
        this.checkCorners();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å –¥–µ—Ä–µ–≤—å—è–º–∏
        for (const tree of this.trees) {
            const distance = this.camera.position.distanceTo(tree.position);
            if (distance < 1.5) {
                this.camera.position.copy(oldPosition);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å –∫–∞–º–Ω—è–º–∏
        for (const rock of this.rocks) {
            const distance = this.camera.position.distanceTo(rock.position);
            if (distance < 1) {
                this.camera.position.copy(oldPosition);
            }
        }
    }
    
    checkCorners() {
        const corners = [
            { x: -40, z: -40 },
            { x: 40, z: -40 },
            { x: -40, z: 40 },
            { x: 40, z: 40 }
        ];
        
        corners.forEach((corner, index) => {
            const distance = this.camera.position.distanceTo(new THREE.Vector3(corner.x, 0, corner.z));
            if (distance < 5 && !this.visitedCorners.has(index)) {
                this.visitedCorners.add(index);
                if (GameData.missions[19]) {
                    GameData.missions[19].corners = this.visitedCorners.size;
                }
            }
        });
    }
    
    updateMissions() {
        // –ó–∞–¥–∞–Ω–∏–µ 1: –£–±–∏—Ç—å 10 –∑–æ–º–±–∏
        if (GameData.missions[1] && !GameData.missions[1].completed) {
            GameData.missions[1].killed = this.zombiesKilled;
            if (this.zombiesKilled >= 10) {
                this.completeMission(1);
            }
        }
        
        // –ó–∞–¥–∞–Ω–∏–µ 2: –ù–∞–±—Ä–∞—Ç—å 1000 –æ—á–∫–æ–≤
        if (GameData.missions[2] && !GameData.missions[2].completed && this.score >= 1000) {
            this.completeMission(2);
        }
        
        // –ó–∞–¥–∞–Ω–∏–µ 14: –°–Ω–∞–π–ø–µ—Ä (50 —É–±–∏–π—Å—Ç–≤ –ø–æ–¥—Ä—è–¥)
        if (GameData.missions[14] && !GameData.missions[14].completed) {
            GameData.missions[14].consecutiveKills = this.consecutiveKills;
            if (this.consecutiveKills >= 50) {
                this.completeMission(14);
            }
        }
        
        // –ó–∞–¥–∞–Ω–∏–µ 15: –ë–µ–≥—É–Ω (1000 –º–µ—Ç—Ä–æ–≤)
        if (GameData.missions[15] && !GameData.missions[15].completed) {
            GameData.missions[15].distance = Math.floor(this.totalDistance);
            if (this.totalDistance >= 1000) {
                this.completeMission(15);
            }
        }
        
        // –ó–∞–¥–∞–Ω–∏–µ 16: –≠–∫–æ–Ω–æ–º–∏—Å—Ç (20 –∑–æ–º–±–∏ –º–µ–Ω–µ–µ —á–µ–º 100 –ø–∞—Ç—Ä–æ–Ω–∞–º–∏)
        if (GameData.missions[16] && !GameData.missions[16].completed) {
            if (this.shotsFired <= 100 && this.zombiesKilled >= 20) {
                this.completeMission(16);
            }
        }
        
        // –ó–∞–¥–∞–Ω–∏–µ 17: –ù–æ—á–Ω–æ–π –æ—Ö–æ—Ç–Ω–∏–∫ (30 –∑–æ–º–±–∏ –ø–æ—Å–ª–µ 5 –º–∏–Ω—É—Ç)
        if (GameData.missions[17] && !GameData.missions[17].completed && this.gameTime >= 300) {
            GameData.missions[17].nightKills = this.zombiesKilled;
            if (this.zombiesKilled >= 30) {
                this.completeMission(17);
            }
        }
        
        // –ó–∞–¥–∞–Ω–∏–µ 18: –°–∫–æ—Ä–æ—Å—Ç—Ä–µ–ª (10 –∑–æ–º–±–∏ –∑–∞ 30 —Å–µ–∫—É–Ω–¥)
        if (GameData.missions[18] && !GameData.missions[18].completed) {
            this.speedKillTimer += 0.016; // –ü—Ä–∏–º–µ—Ä–Ω–æ 60 FPS
            if (this.speedKillTimer <= 30) {
                GameData.missions[18].speedKills = this.speedKillCount;
                if (this.speedKillCount >= 10) {
                    this.completeMission(18);
                }
            } else {
                this.speedKillTimer = 0;
                this.speedKillCount = 0;
            }
        }
        
        // –ó–∞–¥–∞–Ω–∏–µ 20: –ë–µ—Ä—Å–µ—Ä–∫ (100 –∑–æ–º–±–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏)
        if (GameData.missions[20] && !GameData.missions[20].completed) {
            GameData.missions[20].noReloadKills = this.noReloadKills;
            if (this.noReloadKills >= 100) {
                this.completeMission(20);
            }
        }
        
        // –ó–∞–¥–∞–Ω–∏–µ 22: –ú–∞—Å—Ç–µ—Ä —Ç–æ—á–Ω–æ—Å—Ç–∏ (90% —Ç–æ—á–Ω–æ—Å—Ç—å)
        if (GameData.missions[22] && !GameData.missions[22].completed && this.shotsFired > 0) {
            const accuracy = (this.shotsHit / this.shotsFired) * 100;
            GameData.missions[22].accuracy = Math.floor(accuracy);
            if (accuracy >= 90) {
                this.completeMission(22);
            }
        }
        
        // –ó–∞–¥–∞–Ω–∏–µ 23: –õ–µ–≥–µ–Ω–¥–∞ (100000 –æ—á–∫–æ–≤)
        if (GameData.missions[23] && !GameData.missions[23].completed) {
            GameData.missions[23].score = this.score;
            if (this.score >= 100000) {
                this.completeMission(23);
            }
        }
    }
    
    completeMission(missionId) {
        const rewards = {
            1: 500, 2: 1000, 3: 2000, 4: 1500, 5: 3000, 6: 4000, 7: 5000, 8: 7500, 9: 10000, 10: 12000,
            11: 15000, 12: 20000, 13: 50000, 14: 8000, 15: 3000, 16: 4000, 17: 6000, 18: 5000, 19: 2500,
            20: 15000, 21: 25000, 22: 12000, 23: 100000
        };
        
        GameData.missions[missionId].completed = true;
        GameData.totalScore += rewards[missionId] || 1000;
        GameData.save();
        
        const missionElement = document.querySelector(`.mission[data-id="${missionId}"]`);
        if (missionElement) {
            const claimBtn = missionElement.querySelector('.claim-btn');
            if (claimBtn) {
                claimBtn.disabled = false;
            }
        }
    }
    
    animate() {
        if (this.isGameOver) return;
        
        requestAnimationFrame(() => this.animate());
        
        const currentTime = performance.now();
        const deltaTime = (currentTime - this.lastTime) / 1000;
        this.lastTime = currentTime;
        
        this.gameTime += deltaTime;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π –≤—ã–∂–∏–≤–∞–Ω–∏—è
        if (GameData.missions[3] && !GameData.missions[3].completed) {
            GameData.missions[3].time = this.gameTime;
            if (this.gameTime >= 300) { // 5 –º–∏–Ω—É—Ç
                this.completeMission(3);
            }
        }
        
        if (GameData.missions[21] && !GameData.missions[21].completed) {
            GameData.missions[21].time = this.gameTime;
            if (this.gameTime >= 3600) { // 1 —á–∞—Å
                this.completeMission(21);
            }
        }
        
        this.updateMovement();
        this.updateZombies();
        this.updateBullets();
        this.updateMissions();
        
        this.renderer.render(this.scene, this.camera);
    }
    
    gameOver() {
        this.isGameOver = true;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –≤ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
        GameData.totalScore += this.score;
        GameData.save();
        
        document.getElementById('game-over').classList.add('active');
        document.getElementById('final-score').textContent = this.score;
        document.getElementById('completed-missions').textContent = 
            Object.values(GameData.missions).filter(m => m.completed).length;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
window.addEventListener('load', () => {
    GameData.load();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫
    if (GameData.language) {
        changeLanguage(GameData.language);
    }
    
    const menu = document.getElementById('menu');
    const missions = document.getElementById('missions');
    const shop = document.getElementById('shop');
    const language = document.getElementById('language');
    
    menu.classList.add('active');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥
    document.querySelectorAll('.claim-btn').forEach(btn => {
        const missionId = btn.closest('.mission').dataset.id;
        if (GameData.missions[missionId] && GameData.missions[missionId].completed) {
            btn.disabled = true;
            btn.textContent = '–ü–æ–ª—É—á–µ–Ω–æ';
        }
        
        btn.addEventListener('click', () => {
            if (GameData.missions[missionId] && GameData.missions[missionId].completed) {
                const rewards = {
                    1: 500, 2: 1000, 3: 2000, 4: 1500, 5: 3000, 6: 4000, 7: 5000, 8: 7500, 9: 10000, 10: 12000,
                    11: 15000, 12: 20000, 13: 50000, 14: 8000, 15: 3000, 16: 4000, 17: 6000, 18: 5000, 19: 2500,
                    20: 15000, 21: 25000, 22: 12000, 23: 100000,
                    s1: 2000, s2: 2000, s3: 2500, s4: 3000, s5: 1500
                };
                
                GameData.totalScore += rewards[missionId] || 1000;
                GameData.save();
                GameData.updateUI();
                
                btn.disabled = true;
                btn.textContent = '–ü–æ–ª—É—á–µ–Ω–æ';
                
                alert(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${rewards[missionId]} –æ—á–∫–æ–≤!`);
            }
        });
    });
    
    // –ö–Ω–æ–ø–∫–∞ —à–∞—Ä–∏–Ω–≥–∞
    const shareBtn = document.querySelector('.share-btn');
    if (shareBtn) {
        shareBtn.addEventListener('click', () => {
        if (navigator.share) {
            navigator.share({
                title: 'Zombie Shooter 3D',
                text: '–ü–æ–ø—Ä–æ–±—É–π –∫—Ä—É—Ç–æ–π —à—É—Ç–µ—Ä —Å –∑–æ–º–±–∏! –Ø —É–∂–µ –Ω–∞–±—Ä–∞–ª ' + GameData.totalScore + ' –æ—á–∫–æ–≤!',
                url: window.location.href
            });
        } else {
            // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ API —à–∞—Ä–∏–Ω–≥–∞
            const shareText = `Zombie Shooter 3D - –ü–æ–ø—Ä–æ–±—É–π –∫—Ä—É—Ç–æ–π —à—É—Ç–µ—Ä —Å –∑–æ–º–±–∏! –Ø —É–∂–µ –Ω–∞–±—Ä–∞–ª ${GameData.totalScore} –æ—á–∫–æ–≤!\n${window.location.href}`;
            navigator.clipboard.writeText(shareText)
                .then(() => alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!'))
                .catch(() => alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É'));
        }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    const startBtn = document.getElementById('start-btn');
    if (startBtn) {
        startBtn.addEventListener('click', () => {
        menu.classList.remove('active');
        try {
            new ZombieShooter();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
            menu.classList.add('active');
        }
        });
    }
    
    const missionsBtn = document.getElementById('missions-btn');
    if (missionsBtn) {
        missionsBtn.addEventListener('click', () => {
            menu.classList.remove('active');
            missions.classList.add('active');
            updateMissionsUI();
        });
    }
    
    const shopBtn = document.getElementById('shop-btn');
    if (shopBtn) {
        shopBtn.addEventListener('click', () => {
            menu.classList.remove('active');
            shop.classList.add('active');
            updateShopUI();
        });
    }
    
    document.getElementById('language-btn').addEventListener('click', () => {
        menu.classList.remove('active');
        language.classList.add('active');
    });
    
    document.getElementById('missions-back').addEventListener('click', () => {
        missions.classList.remove('active');
        menu.classList.add('active');
    });
    
    document.getElementById('shop-back').addEventListener('click', () => {
        shop.classList.remove('active');
        menu.classList.add('active');
    });
    
    document.getElementById('language-back').addEventListener('click', () => {
        language.classList.remove('active');
        menu.classList.add('active');
    });
    
    document.getElementById('menu-btn').addEventListener('click', () => {
        document.getElementById('game-over').classList.remove('active');
        menu.classList.add('active');
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    document.querySelectorAll('.lang-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            const lang = btn.dataset.lang;
            changeLanguage(lang);
            language.classList.remove('active');
            menu.classList.add('active');
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∫—É–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    document.querySelectorAll('.buy-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const itemId = e.target.closest('.shop-item').dataset.id;
            buyItem(itemId);
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫ –∑–∞–¥–∞–Ω–∏–π
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
            document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
            document.querySelectorAll('.missions-list').forEach(list => list.classList.remove('active-tab'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
            btn.classList.add('active');
            const tabName = btn.dataset.tab;
            document.getElementById(`${tabName}-missions`).classList.add('active-tab');
        });
    });
});



function updateMissionsUI() {
    Object.entries(GameData.missions).forEach(([id, mission]) => {
        const missionElement = document.querySelector(`.mission[data-id="${id}"]`);
        if (missionElement) {
            const claimBtn = missionElement.querySelector('.claim-btn');
            const progressElement = missionElement.querySelector('.progress');
            
            if (id <= 23 && !id.startsWith('s') && progressElement) { // –ò–≥—Ä–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
                switch (id) {
                    case '1':
                        progressElement.textContent = `${mission.killed}/10`;
                        break;
                    case '2':
                        progressElement.textContent = `${mission.score}/1000`;
                        break;
                    case '3':
                        const minutes = Math.floor(mission.time / 60);
                        const seconds = Math.floor(mission.time % 60);
                        progressElement.textContent = 
                            `${minutes}:${seconds.toString().padStart(2, '0')}/5:00`;
                        break;
                    case '14':
                        progressElement.textContent = `${mission.consecutiveKills}/50`;
                        break;
                    case '15':
                        progressElement.textContent = `${mission.distance}/1000–º`;
                        break;
                    case '16':
                        progressElement.textContent = `${mission.efficientKills}/20 –∑–æ–º–±–∏`;
                        break;
                    case '17':
                        progressElement.textContent = `${mission.nightKills}/30`;
                        break;
                    case '18':
                        progressElement.textContent = `${mission.speedKills}/10`;
                        break;
                    case '19':
                        progressElement.textContent = `${mission.corners}/4 —É–≥–ª–∞`;
                        break;
                    case '20':
                        progressElement.textContent = `${mission.noReloadKills}/100`;
                        break;
                    case '21':
                        const hours = Math.floor(mission.time / 3600);
                        const mins = Math.floor((mission.time % 3600) / 60);
                        const secs = Math.floor(mission.time % 60);
                        progressElement.textContent = 
                            `${hours}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}/1:00:00`;
                        break;
                    case '22':
                        progressElement.textContent = `${mission.accuracy}%/90%`;
                        break;
                    case '23':
                        progressElement.textContent = `${mission.score}/100000`;
                        break;
                }
            }
            
            if (mission.completed && claimBtn) {
                claimBtn.disabled = true;
                claimBtn.textContent = '–ü–æ–ª—É—á–µ–Ω–æ';
            }
        }
    });
}

function updateShopUI() {
    document.querySelectorAll('.shop-item').forEach(item => {
        const buyBtn = item.querySelector('.buy-btn');
        if (buyBtn) {
            const itemId = item.dataset.id;
            const price = itemId === '1' ? 1000 : 2000;
            
            buyBtn.disabled = GameData.totalScore < price;
        }
    });
}

function buyItem(itemId) {
    const prices = {
        1: 1000,
        2: 2000
    };
    
    const price = prices[itemId];
    if (GameData.totalScore >= price) {
        GameData.totalScore -= price;
        
        switch (itemId) {
            case '1':
                GameData.maxHealth += 20;
                break;
            case '2':
                GameData.damageMultiplier *= 1.25;
                break;
        }
        
        GameData.save();
        GameData.updateUI();
        updateShopUI();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', () => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä canvas –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    const canvas = document.getElementById('game');
    if (canvas) {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    }
});
